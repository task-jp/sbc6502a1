commit 98bdde6dd3dcd47968a23ac96abea14d81bbe951
Author: tkhshmsy <tkhshmsy@gmail.com>
Date:   Fri May 3 03:51:24 2024 +0900

    Add target sbc6502a1

diff --git a/asminc/sbc6502a1.inc b/asminc/sbc6502a1.inc
new file mode 100644
index 000000000..13cbb5aaf
--- /dev/null
+++ b/asminc/sbc6502a1.inc
@@ -0,0 +1,13 @@
+;
+; sbc6502a1 definitions
+;
+
+RAMSTART    :=  $0300
+
+; KBD I/F from PIA
+KBD         :=  $D010
+KBDRDY      :=  $D011
+
+; routine from wozmon
+RESET       :=  $FF00
+ECHO        :=  $FFEF
diff --git a/cfg/sbc6502a1.cfg b/cfg/sbc6502a1.cfg
new file mode 100644
index 000000000..d7002a635
--- /dev/null
+++ b/cfg/sbc6502a1.cfg
@@ -0,0 +1,37 @@
+#
+# sbc6502a1.cfg for ld65
+#
+
+FEATURES {
+    STARTADDRESS: default = $0300;
+    CONDES: segment = STARTUP,
+            type    = constructor,
+            label   = __CONSTRUCTOR_TABLE__,
+            count   = __CONSTRUCTOR_COUNT__;
+    CONDES: segment = STARTUP,
+            type    = destructor,
+            label   = __DESTRUCTOR_TABLE__,
+            count   = __DESTRUCTOR_COUNT__;
+}
+
+SYMBOLS {
+    __STACKSIZE__:    type = weak, value = $0080;
+    __STARTADDRESS__: type = export, value = %S;
+}
+
+MEMORY {
+    ZP:       file = %O, define = yes, start = $0000, size = $00EE;
+    CPUSTACK: file = "", define = yes, start = $0100, size = $0100;
+    RAM:      file = %O, define = yes, start = %S, size = $8000 - %S - __STACKSIZE__;
+    ROM:      file = "", define = yes, start = $A000, size = $6000;
+}
+
+SEGMENTS {
+    ZEROPAGE: load = ZP,  type = zp,  define = yes;
+    STARTUP:  load = RAM, type = ro,  define = yes;
+    CODE:     load = RAM, type = ro,  define = yes;
+    RODATA:   load = RAM, type = ro,  define = yes;
+    ONCE:     load = RAM, type = ro,  define = yes;
+    DATA:     load = RAM, type = rw,  define = yes;
+    BSS:      load = RAM, type = bss, define = yes;
+}
diff --git a/include/sbc6502a1.h b/include/sbc6502a1.h
new file mode 100644
index 000000000..edffe8437
--- /dev/null
+++ b/include/sbc6502a1.h
@@ -0,0 +1,7 @@
+#ifndef _SBC6502A1_H_
+#define _SBC6502A1_H_
+
+int __fastcall__ getkey();
+unsigned char kbhit();
+
+#endif // _SBC6502A1_H_
\ No newline at end of file
diff --git a/libsrc/Makefile b/libsrc/Makefile
index 8a4f11414..23754d515 100644
--- a/libsrc/Makefile
+++ b/libsrc/Makefile
@@ -38,11 +38,13 @@ TARGETS = apple2       \
           sim65c02     \
           supervision  \
           sym1         \
-          telestrat
+          telestrat    \
+          sbc6502a1
 
 TARGETTEST = none     \
              sim6502  \
-             sim65c02
+             sim65c02 \
+             sbc6502a1
 
 DRVTYPES = emd \
            joy \
diff --git a/libsrc/sbc6502a1/crt0.s b/libsrc/sbc6502a1/crt0.s
new file mode 100644
index 000000000..6929e5bfe
--- /dev/null
+++ b/libsrc/sbc6502a1/crt0.s
@@ -0,0 +1,35 @@
+;
+; startup
+;
+
+.export     _init
+.export     _exit
+.export     __STARTUP__ : absolute = 1
+
+.import     _main
+.import     zerobss
+.import     copydata
+.import     initlib
+.import     donelib
+.import     __RAM_START__
+.import     __RAM_SIZE__
+.import     __STACKSIZE__
+
+.include    "zeropage.inc"
+.include    "sbc6502a1.inc"
+
+.segment    "STARTUP"
+
+_init:
+        cld
+        lda     #<(__RAM_START__ + __RAM_SIZE__)
+        sta     sp
+        lda     #>(__RAM_START__ + __RAM_SIZE__)
+        sta     sp+1
+        jsr     zerobss           ; clear BSS
+        jsr     copydata          ; init DATA
+        jsr     initlib           ; constrcutor
+        jsr     _main             ; call main
+_exit:
+        jsr     donelib           ; destructor
+        jmp     RESET
diff --git a/libsrc/sbc6502a1/ctype.s b/libsrc/sbc6502a1/ctype.s
new file mode 100644
index 000000000..fcf4f6eb7
--- /dev/null
+++ b/libsrc/sbc6502a1/ctype.s
@@ -0,0 +1,5 @@
+;
+; character type definitions
+;
+
+.include "ctype_common.inc"
diff --git a/libsrc/sbc6502a1/getkey.s b/libsrc/sbc6502a1/getkey.s
new file mode 100644
index 000000000..b828435b3
--- /dev/null
+++ b/libsrc/sbc6502a1/getkey.s
@@ -0,0 +1,17 @@
+;
+;   int __fastcall__ getkey(void);
+;
+
+.include        "sbc6502a1.inc"
+
+.export       _getkey
+
+.proc        _getkey
+getch:
+        lda     KBDRDY
+        bpl     getch
+        lda     KBD
+        and     #$7F
+        ldx     #$00
+        rts
+.endproc
diff --git a/libsrc/sbc6502a1/kbhit.s b/libsrc/sbc6502a1/kbhit.s
new file mode 100644
index 000000000..9b0953270
--- /dev/null
+++ b/libsrc/sbc6502a1/kbhit.s
@@ -0,0 +1,18 @@
+;
+; unsigned char kbhit (void);
+;
+
+.export     _kbhit
+
+.include    "sbc6502a1.inc"
+
+.export     _kbhit
+
+.proc       _kbhit
+        ldx     #$00
+        lda     KBDRDY
+        rol
+        txa
+        rol
+        rts
+.endproc
diff --git a/libsrc/sbc6502a1/read.s b/libsrc/sbc6502a1/read.s
new file mode 100644
index 000000000..e33806a92
--- /dev/null
+++ b/libsrc/sbc6502a1/read.s
@@ -0,0 +1,49 @@
+;
+; int __fastcall__ read (int fd, void* buf, unsigned int count);
+;
+
+.include    "sbc6502a1.inc"
+
+.import     popax, popptr1
+.importzp   ptr1, ptr2, ptr3    ; ptr1 = fd, ptr2 = buf, ptr3 = count
+
+.export     _read
+
+.proc       _read
+        sta     ptr3
+        stx     ptr3+1
+        inx
+        stx     ptr2+1
+        tax
+        inx
+        stx     ptr2
+        jsr     popptr1
+        jsr     popax
+begin:
+        dec     ptr2
+        bne     getch
+        dec     ptr2+1
+        beq     done
+getch:
+        lda     KBDRDY
+        bpl     getch
+        lda     KBD
+        and     #$7F            ; clear bit 7
+        ldx     #$00
+        jsr     ECHO
+        cmp     #$0D            ; CR
+        bne     putch
+        lda     #$0A            ; add LF
+        jsr     ECHO
+putch:
+        ldy     #$00
+        sta     (ptr1),y
+        inc     ptr1
+        bne     begin
+        inc     ptr1+1
+        bne     begin
+done:
+        lda     ptr3
+        ldx     ptr3+1
+        rts
+.endproc
diff --git a/libsrc/sbc6502a1/write.s b/libsrc/sbc6502a1/write.s
new file mode 100644
index 000000000..6ae9509a7
--- /dev/null
+++ b/libsrc/sbc6502a1/write.s
@@ -0,0 +1,44 @@
+;
+; int __fascall__ write(int fd, const void* buf, unsigned int count);
+;
+
+.include    "sbc6502a1.inc"
+
+.import     popax, popptr1
+.importzp   ptr1, ptr2, ptr3    ; ptr1 = fd, ptr2 = buf, ptr3 = count
+
+.export     _write
+
+.proc       _write
+        sta     ptr3
+        stx     ptr3+1
+        inx
+        stx     ptr2+1
+        tax
+        inx
+        stx     ptr2
+        jsr     popptr1
+        jsr     popax
+begin:
+        dec     ptr2
+        bne     outch
+        dec     ptr2+1
+        beq     done
+outch:
+        ldy     #0
+        lda     (ptr1),y
+        jsr     ECHO
+        cmp     #$0A            ; LF
+        bne     next
+        lda     #$0D            ; CR
+        jsr     ECHO
+next:
+        inc     ptr1
+        bne     begin
+        inc     ptr1+1
+        jmp     begin
+done:
+        lda     ptr3
+        ldx     ptr3+1
+        rts
+.endproc
diff --git a/src/ca65/main.c b/src/ca65/main.c
index 3ec6c84ee..fd15f3379 100644
--- a/src/ca65/main.c
+++ b/src/ca65/main.c
@@ -350,6 +350,10 @@ static void SetSys (const char* Sys)
             NewSymbol ("__RP6502__", 1);
             break;
 
+        case TGT_SBC6502A1:
+            NewSymbol ("__SBC6502A1__", 1);
+            break;
+
         default:
             AbEnd ("Invalid target name: '%s'", Sys);
 
diff --git a/src/cc65/main.c b/src/cc65/main.c
index 7dc5417f6..4b2ebbc31 100644
--- a/src/cc65/main.c
+++ b/src/cc65/main.c
@@ -307,6 +307,10 @@ static void SetSys (const char* Sys)
             DefineNumericMacro ("__RP6502__", 1);
             break;
 
+        case TGT_SBC6502A1:
+            DefineNumericMacro ("__SBC6502A1__", 1);
+            break;
+
         default:
             AbEnd ("Unknown target system '%s'", Sys);
     }
diff --git a/src/common/target.c b/src/common/target.c
index b50478e16..56c4c1a01 100644
--- a/src/common/target.c
+++ b/src/common/target.c
@@ -174,6 +174,7 @@ static const TargetEntry TargetMap[] = {
     {   "pet",          TGT_PET          },
     {   "plus4",        TGT_PLUS4        },
     {   "rp6502",       TGT_RP6502       },
+    {   "sbc6502a1",    TGT_SBC6502A1    },
     {   "sim6502",      TGT_SIM6502      },
     {   "sim65c02",     TGT_SIM65C02     },
     {   "supervision",  TGT_SUPERVISION  },
@@ -223,6 +224,7 @@ static const TargetProperties PropertyTable[TGT_COUNT] = {
     { "sym1",           CPU_6502,       BINFMT_BINARY,      CTNone  },
     { "kim1",           CPU_6502,       BINFMT_BINARY,      CTNone  },
     { "rp6502",         CPU_65C02,      BINFMT_BINARY,      CTNone  },
+    { "sbc6502a1",      CPU_65C02,      BINFMT_BINARY,      CTNone  },
 };
 
 /* Target system */
diff --git a/src/common/target.h b/src/common/target.h
index 730b8211e..05ac6f11c 100644
--- a/src/common/target.h
+++ b/src/common/target.h
@@ -89,6 +89,7 @@ typedef enum {
     TGT_SYM1,
     TGT_KIM1,
     TGT_RP6502,
+    TGT_SBC6502A1,
     TGT_COUNT                   /* Number of target systems */
 } target_t;
 
diff --git a/targettest/Makefile b/targettest/Makefile
index 4d989d0df..4bc678266 100644
--- a/targettest/Makefile
+++ b/targettest/Makefile
@@ -766,7 +766,8 @@ TARGETS :=     \
   supervision  \
   sym1         \
   telestrat    \
-  vic20
+  vic20        \
+  sbc6502a1
 
 # --------------------------------------------------------------------------
 # Rule to make the binaries for every platform
